name: Build and Release

on:
  release:
    types: [created]

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Setup Node.js
        uses: actions/setup-node@v4.2.0
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Electron Builder
        run: npm install -g electron-builder

      - name: Build application
        run: |
          npm run build
          electron-builder --win --publish never

      - name: Get release info (GitHub API)
        id: get_release
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: context.payload.release.tag_name
            });
            return release.data.id;

      - name: Upload release assets for Windows
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const distPath = path.join(process.cwd(), 'dist');
            
            const uploadAsset = async (file) => {
              const filePath = path.join(distPath, file);
              const fileStats = fs.statSync(filePath);
              const fileStream = fs.createReadStream(filePath);
              
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: ${{ steps.get_release.outputs.result }},
                name: file,
                data: fileStream,
                headers: {
                  'content-type': 'application/octet-stream',
                  'content-length': fileStats.size
                }
              });
            };
            
            // Upload exe and msi files
            const files = fs.readdirSync(distPath);
            for (const file of files) {
              if (file.endsWith('.exe') || file.endsWith('.msi')) {
                await uploadAsset(file);
              }
            }
